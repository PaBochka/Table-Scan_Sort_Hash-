#include	5
<conio.h>	1
"TText.h"	1
<iostream>	1
<fstream>	1
<string>	1
#define	1
BufLength	1
80	1
static	2
char	1
StrBuf[BufLength];	1
int	4
TextLevel;	5
using	1
namespace	1
std;	1
TText::TText(PTextLink	1
p1)	1
{	22
if	59
(p1	2
==	16
NULL)	32
p1	8
=	66
new	10
TextLink();	2
First	4
p1;	6
}	71
void	19
TText::GoFirstLink(void){	1
while	7
(!Path.empty())Path.pop();	1
Current	7
First;	2
TText::GoNextLink(void){	1
(Current	14
!=	39
(Current->Next	5
Path.push(Current);	2
Current->Next;	5
TText::GoDownLink(void){	1
(Current->Down	5
Current->Down;	5
TText::GoPrevLink(void){	1
(!Path.empty()){	1
Path.top();	1
Path.pop();	1
std::string	1
TText::Getline(void){	1
return	8
std::string("");	1
else	8
std::string(Current->Str);	1
TText::SetLine(std::string	1
s){	5
strncpy_s(Current->Str,	1
s.c_str(),	5
TextLineLength);	5
Current->Str[TextLineLength	1
-	5
1]	5
'\0';	5
TText::InsDownLine(std::string	1
NULL){	15
PTextLink	22
pd	2
TextLink("",	4
pd,	1
NULL);	3
strncpy_s(p1->Str,	4
Current->Down	4
p1->Str[TextLineLength	4
TText::InsDownSection(std::string	1
NULL,	3
pd);	1
TText::InsNextLine(std::string	1
pn	2
pn,	1
Current->Next	4
TText::InsNextSection(std::string	1
pn);	1
TText::DelDownLine(void){	1
p11	6
p12	6
p11->Next;	4
(p11->Down	1
p12;	4
TText::DelDownSection(void){	1
TText::DelNextLine(void){	1
(p11->Next	1
TText::DelNextSection(void){	1
TText::DelFirst(void){	1
(First	2
(First->Next	1
First->Next;	2
NULL;	2
TText::Reset(void){	1
(!St.empty())	1
St.pop();	5
St.push(Current);	1
St.push(Current->Next);	2
St.push(Current->Down);	2
IsTextEnded();	2
TText::IsTextEnded(void)	1
const{	1
!St.size();	1
TText::GoNext(void){	1
(!IsTextEnded()){	1
St.top();	3
First)	2
TText::GetFirstAtom(PTextLink	1
p1){	1
tmp	2
(!tmp->IsAtom())	1
St.push(tmp);	1
tmp->GetDown();	1
tmp;	1
//PText	1
TText::GetCopy(){	1
//	32
p11,	3
p12,	1
First,	2
cp1	1
(St.empty()){	1
(1){	1
GetFirstAtom(p1);	1
St.push(p1);	1
p1->GetDown();	1
(St.empty())	1
break;	2
else{	4
(strstr(p11->Str,	2
"Copy")	2
TextLink("Copy",	2
cp1);	2
TText(cp1);	1
//}	1
TText::Print(){	1
TextLevel	3
0;	7
PrintText(First);	1
TText::PrintText(PTextLink	1
pt1){	1
(pt1	1
for	4
(int	4
i	8
<	4
i++)	4
std::cout	1
<<	22
"	4
";	4
(pt1==Current)	1
cout	2
"\b>";	1
(*pt1).Print(std::cout);	1
(pt1->Down!=NULL)	2
endl;	1
TextLevel++;	4
PrintText(pt1->GetDown());	1
TextLevel--;	3
PrintText(pt1->GetNext());	1
TText::Read(char	1
*pFileName){	1
ifstream	1
TxtFile(pFileName);	1
(&TxtFile	2
ReadText(TxtFile);	3
TText::ReadText(ifstream	1
&TxtFile){	1
Head,	1
pt1;	2
Head	2
pt1	3
(TxtFile.eof()	1
0){	1
TxtFile.getline(StrBuf,	1
BufLength,	1
'\n');	1
(StrBuf[0]	2
'}')	1
/*TextLevel--;*/	1
'{'){	1
/*TextLevel++;*/	1
pt1->Down	1
(pt1->Next!=NULL)	1
pt1->Next	2
TextLink(StrBuf,	1
pt1->Next;	1
Head;	2
(Head->Down	1
Head->Next;	1
delete	1
TText::Write(char	1
*FileName)	1
ofstream	1
TxtFile(FileName,	1
ios_base::out);	1
WriteText(TxtFile,	7
true);	4
TText::WriteText(ofstream	1
&TxtFile,	1
pl,	1
bool	1
val){	1
(pl	2
TxtFile	12
"{"	3
'\n';	9
(val	2
false)	1
(*pl).Write(TxtFile);	2
(pl->Down	4
pl->GetDown(),	3
false);	3
"}"	4
(pl->Next	6
pl->GetNext(),	3
true)	1
if((pl->Down	1
||	1
NULL))	1
/*(*pl).Write(TxtFile);	1
(pl->Next!=NULL)	1
}*/	1
