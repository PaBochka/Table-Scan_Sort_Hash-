!St.size();	1
"	1
";	1
"Copy")	1
"TText.h"	1
"\b>";	1
"{"	1
"}"	1
#define	2
#include	1
&TxtFile){	1
&TxtFile,	4
'\0';	5
'\n');	1
'\n';	1
'{'){	1
'}')	1
(!IsTextEnded()){	1
(!Path.empty())Path.pop();	22
(!Path.empty()){	59
(!St.empty())	2
(!tmp->IsAtom())	16
(&TxtFile	32
(*pl).Write(TxtFile);	8
(*pt1).Print(std::cout);	66
(1){	10
(Current	2
(Current->Down	4
(Current->Next	6
(First	71
(First->Next	19
(Head->Down	1
(St.empty())	7
(St.empty()){	1
(StrBuf[0]	7
(TxtFile.eof()	2
(int	1
(p1	14
(p11->Down	39
(p11->Next	5
(pl	2
(pl->Down	5
(pl->Next	1
(pl->Next!=NULL)	5
(pt1	5
(pt1->Down!=NULL)	1
(pt1->Next!=NULL)	1
(pt1==Current)	1
(strstr(p11->Str,	1
(val	1
*FileName)	1
*pFileName){	8
-	1
/*(*pl).Write(TxtFile);	8
/*TextLevel++;*/	1
/*TextLevel--;*/	1
//	5
//PText	1
//}	5
0){	5
0;	1
1]	5
80	5
<	5
<<	1
<conio.h>	15
<fstream>	22
<iostream>	2
<string>	4
=	1
==	3
BufLength	4
BufLength,	4
Current	4
Current->Down	1
Current->Down;	3
Current->Next	1
Current->Next;	1
Current->Str[TextLineLength	2
First	1
First)	4
First,	1
First->Next;	1
First;	1
GetFirstAtom(p1);	6
Head	6
Head,	4
Head->Next;	1
Head;	4
IsTextEnded();	1
NULL)	1
NULL))	1
NULL);	1
NULL){	1
NULL,	2
NULL;	1
PTextLink	2
Path.pop();	2
Path.push(Current);	1
Path.top();	1
PrintText(First);	5
PrintText(pt1->GetDown());	1
PrintText(pt1->GetNext());	2
ReadText(TxtFile);	2
St.pop();	2
St.push(Current);	1
St.push(Current->Down);	1
St.push(Current->Next);	1
St.push(p1);	1
St.push(tmp);	1
St.top();	3
StrBuf[BufLength];	2
TText(cp1);	1
TText::DelDownLine(void){	1
TText::DelDownSection(void){	2
TText::DelFirst(void){	1
TText::DelNextLine(void){	1
TText::DelNextSection(void){	1
TText::GetCopy(){	1
TText::GetFirstAtom(PTextLink	1
TText::Getline(void){	1
TText::GoDownLink(void){	32
TText::GoFirstLink(void){	3
TText::GoNext(void){	1
TText::GoNextLink(void){	2
TText::GoPrevLink(void){	1
TText::InsDownLine(std::string	1
TText::InsDownSection(std::string	1
TText::InsNextLine(std::string	1
TText::InsNextSection(std::string	1
TText::IsTextEnded(void)	1
TText::Print(){	1
TText::PrintText(PTextLink	2
TText::Read(char	4
TText::ReadText(ifstream	2
TText::Reset(void){	2
TText::SetLine(std::string	2
TText::TText(PTextLink	2
TText::Write(char	1
TText::WriteText(ofstream	1
TextLevel	1
TextLevel++;	3
TextLevel--;	7
TextLevel;	1
TextLineLength);	1
TextLink("",	1
TextLink("Copy",	1
TextLink();	4
TextLink(StrBuf,	4
TxtFile	8
TxtFile(FileName,	4
TxtFile(pFileName);	4
TxtFile.getline(StrBuf,	1
WriteText(TxtFile,	22
bool	4
break;	4
char	1
const{	2
cout	1
cp1	1
cp1);	2
delete	1
else	4
else{	1
endl;	3
false)	1
false);	1
for	1
i	1
i++)	1
if	2
if((pl->Down	3
ifstream	1
int	1
ios_base::out);	1
namespace	2
new	2
ofstream	3
p1	1
p1)	1
p1){	1
p1->GetDown();	1
p1->Str[TextLineLength	1
p11	2
p11,	1
p11->Next;	1
p12	1
p12,	1
p12;	1
p1;	1
pd	2
pd);	1
pd,	1
pl,	2
pl->GetDown(),	1
pl->GetNext(),	1
pn	1
pn);	1
pn,	1
pt1	1
pt1){	1
pt1->Down	1
pt1->Next	7
pt1->Next;	4
pt1;	1
return	1
s){	1
s.c_str(),	1
static	1
std::cout	2
std::string	12
std::string("");	3
std::string(Current->Str);	9
std;	2
strncpy_s(Current->Str,	1
strncpy_s(p1->Str,	2
tmp	4
tmp->GetDown();	3
tmp;	3
true)	4
true);	6
using	3
val){	1
void	1
while	1
{	1
||	1
}	1
}*/	1
